#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require 'open-uri'
require 'logger'
require 'fileutils'
require 'feed-normalizer'
require 'pandoc-ruby'

class Rss2Kindle
    attr_reader :options, :help_message

    def initialize
        @options = {}

        @options[:mail]      = false
        @options[:directory] = Dir.pwd
        @options[:context]   = "context"
        @options[:logfile]   = STDERR

        @help_message = "Aborting"

        @option_parser = OptionParser.new do |opts|
          opts.banner = "Usage: #{$PROGRAM_NAME} [options] yamlfile"

          opts.on("-m", "--mail [ADDRESS]", "Email results to ADDRESS") do |m|
            @options[:mail] = m
          end

          opts.on("-d", "--directory [DIR]", String, "Set output directory") do |dir|
              @options[:directory] = File.expand_path dir
          end

          opts.on("--context [FILE]", String, "Set context binary") do |context|
              @options[:context] = context
          end

          opts.on("--pandocdir [DIR]", String, "Path for pandoc binary") do |pandoc|
              @options[:pandoc] = pandoc
              PandocRuby.bin_path = pandoc
          end

          opts.on("--logfile [FILE]", String, "Set logfile") do |logfile|
              @options[:logfile] = logfile
          end
        end
        @option_parser.parse!
        @help_message = @option_parser.to_s

        abort("Missing: yamlfile\n" + @help_message) if ARGV.empty?

    end

    def parse_file filename
        begin 
            yaml_file = open(filename)
        rescue Exception => e
            puts "Cannot open #{filename}: #{e.message}" 
            abort @help_message
        end

        begin 
            feeds = YAML::load_stream(yaml_file)
        rescue Exception => e
            puts "Cannot parse #{filename}: #{e.message}"
            abort @help_message
        end
        return feeds
    end
end

class RssFeed
    attr_accessor :title, :description, :url, :entries

    def clean!
        @title       = PandocRuby.new(@title).to_context
        @description = PandocRuby.new(@description).to_context

        @entries = @entries.map do |rss_item|
            entry = RssEntry.new

            entry.content = rss_item.content rescue rss_item.description
            entry.content = rss_item.description if entry.content.empty?

            entry.title   = PandocRuby.html(rss_item.title).to_context
            entry.content = PandocRuby.html(entry.content).to_context
            entry
        end
    end
end

class RssEntry
    attr_accessor :title, :content
end

class FeedParser
    attr_reader :id, :url

    def initialize id, url
        @id  = id
        begin 
            @url = open(url)
        rescue Exception => e
            puts "Cannot read #{url}: #{e.message}"
            @url = nil
        end
    end

    def fetch age=1
        return nil if @url.nil?

        # SimpleRSS generates a lot of warnings related to UTF. So, we disable warnings
        verbose_level, $VERBOSE = $VERBOSE, nil

        rss = FeedNormalizer::FeedNormalizer.parse @url

        if rss.nil?
            $VERBOSE = verbose_level
            return nil 
        else
            begin
                rss.clean! 
            rescue 
                $VERBOSE = verbose_level
                return nil
            end
        end

        parsed = RssFeed.new
        parsed.title        = rss.title rescue nil
        parsed.description  = rss.description rescue nil
        parsed.url          = rss.url

        date_threshold = DateTime.now - age
        parsed.entries = rss.entries.reject{ |rss_item| date(rss_item) < date_threshold }

        return parsed.clean!
    end

    private 
    def date rss_item
        date = DateTime.parse rss_item.date_published rescue nil
        if date.nil? 
            date = DateTime.parse rss_item.last_updated rescue nil
        end
        return (date or Date.now)
    end
end

class FeedFormatter
    attr_reader :feed_hash

    def initialize feed_hash
        @feed_hash = feed_hash
    end

    def format title="Rss Feeds"
        start = %<
        \\usemodule[rssfeed]
        \\starttext
        \\starttitle[title={#{title} #{Date.today}}]
            \\placelist[chapter]
        \\stoptitle
        >  

        stop = %<
        \\stoptext
        >

        formatted_entries = ""
        @feed_hash.each_pair do |id, feed|
            feed.each do |entry|
                formatted_entries << format_entry(id, entry)
            end
        end

        return start + formatted_entries + stop

    end

    private

    def format_entry id, entry
        # The title may contain `#`, which gets translated to
        # \type{#}, but that does not work inside a title.
        # So, we set the title in asciimode
        %<
        \\startasciimode
        \\startchapter[title={#{entry.title}}][name={#{id}}]
        \\stopasciimode
        #{entry.content}
        \\stopchapter
        >
    end
end

class Compiler
    attr_reader :compiler, :flags

    def initialize compiler, flags
        @compiler = compiler
        @flags    = flags
    end

    def compile filename, show_status=false
        raise "No such file - #{filename}" unless File.exists? filename
        result = %x[#{@compiler} #{@flags} "#{filename}"] 
        puts result if show_status
        return $?.success?
    end
end

class Mailer
    attr_reader :mailer

    # Currently this assumes mutt like options.
    # TODO: Extend the class if and when needed.
    def initialize mailer="mutt"
        @mailer = mailer
    end

    def email address, message_file, attachment=nil
        raise "No such file - #{message_file}" unless File.exists? message_file
        if attachment.nil?
            %x[#{@mailer} #{address} < #{message_file}]
        else
            raise "No such file - #{attachment}" unless File.exists? attachment
            %x[#{@mailer} -a "#{attachment}" -- #{address} < #{message_file}]
        end
        return $?.success?
    end
end


if __FILE__ == $PROGRAM_NAME

    rss2kindle = Rss2Kindle.new
    context    = Compiler.new rss2kindle.options[:context], "--batchmode --noconsole"
    mailer     = Mailer.new  #TODO: Make configurable
    logger     = Logger.new rss2kindle.options[:logfile], 'weekly'


    ARGV.each do |filename|
        categories = rss2kindle.parse_file filename
        logger.info { "Reading yaml file " + filename } 

        pwd = Dir.pwd
        Dir.chdir rss2kindle.options[:directory]

        categories.each do |category| 
            title = (category["title"] or "Rss2Kindle")   rescue "Rss2Kindle"
            file  = (category["file"]  or title + ".tex") rescue title + ".tex"
            age   = (category["age"]   or 1)              rescue 1
            feeds = category["feeds"] rescue nil
            if feeds.nil?
                logger.warn "Category #{title} has no feeds; skipping."
                next
            end

            begin
                FileUtils.touch file
            rescue Exception => e
                logger.warn "File #{file} for category #{title} is not writable; skipping: #{e.message}"
                next
            end

            parsed = {}
            feeds.each_pair do |id, url|
                logger.info("Reading feed #{id}: #{url}")
                parsed_feed = FeedParser.new(id, url).fetch age
                parsed[id] = parsed_feed unless parsed_feed.nil? or parsed_feed.empty?
            end 

            if parsed.empty?
                logger.info("No recent feeds for category #{title}.")
                next
            end

            File.open(file, 'w') do |handle|
                logger.info("Writing #{title} to #{file}")
                handle.puts(FeedFormatter.new(parsed).format title)
            end

            logger.info("Compiling #{file}")
            if context.compile file 
                if rss2kindle.options[:mail]
                    pdfname = file.chomp(File.extname(file)) + ".pdf"
                    logger.info("Emailing #{pdfname}")
                    mailer.email rss2kindle.options[:mail], "/dev/null", pdfname
                end
            else
                logger.error("Error in compiling #{file}")
            end
        end
        
        Dir.chdir pwd

    end
end
