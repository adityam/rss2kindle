#!/usr/bin/env ruby

# SimpleRSS generates a lot of warnings related to UTF. So, we disable warnings
$VERBOSE = nil

require 'rubygems'
require 'feed-normalizer'
require 'open-uri'
require 'htmlentities'

class RssFeed
  attr_reader :url, :type

  def initialize(url, type=:html)
    @url  = url
    @type = type
  end
end

class RssRender
  attr_accessor :filename, :to_context

  def initialize filename #Assume filename has no extension
    @filename = filename
  end

  def render feed 
    rss = FeedNormalizer::FeedNormalizer.parse open(feed.url)

    @to_context = Proc.new{|text| to_context_from feed.type, text}

    File.open("#{@filename}.tex", 'w') do |file|
      file.puts "\\usemodule[rssfeed]"
      file.puts "\\setuphead[section,subsection,subsubsection][number=no]"
      file.puts "\\starttext \\asciimode"

      title       = rss.title       rescue nil
      description = @to_context.call(description) rescue nil
      link        = rss.url        rescue nil

      file.puts(render_title title, description, link)

      rss.clean!

      # TODO: Check pubdate and only add new items
       rss.entries.each do |item| 
         title   = item.title
         link    = item.url

         content = item.content rescue item.description
         # Sometimes content is set to nill
         content = item.description if content == ""

         content = @to_context.call(content)

         file.puts(render_item title, link, content)
       end
      file.puts "\\stoptitle"
      file.puts "\\stoptext"
    end

    %x[source /opt/context-minimals/setuptex && context --batchmode --noconsole #{filename}]

  end

  def email address
    %x[mutt -a #{@filename}.pdf -- #{address} < /dev/null]
  end

  private

  def to_context_from from, text
    context = ""
     IO.popen(["pandoc", "-f", from.to_s, "-t",  "context"], mode="r+") do |file|
      file.puts text
      file.close_write
      context = file.read
    end
    return context
  end

  def render_url link, text
    %<\\useURL[link][#{link}][][{#{text}}]>
  end

  def render_title title, description, link
    %<
      #{render_url link, "{\\ttx #{link}}"}
      \\setvariables
          [rssfeed]
          [title={#{title}},
           description={#{description}},
           link={\\from[link]}]
    >
  end

  def render_item title, link, content
    %<
      #{render_url link, title}
      \\starttitle[title={\\from[link]}, bookmark={#{title}}]
      #{content}
      \\stoptitle
    >
  end

end

FEEDS = [ {:name=>"coding-horror", :link=>"http://feeds.feedburner.com/codinghorror/", :type=>"html"},
          {:name=>"endeavor", :link=>"http://feeds.feedburner.com/theendeavour", :type=>"html"},
          {:name=>"IEEE-TAC", :link=>"http://ieeexplore.ieee.org/rss/TOC9.XML", :type=>"markdown"},
          {:name=>"TeX-SE", :link=>"http://tex.stackexchange.com/feeds/question/4987", :type=>"html"}, 
          {:name=>"mansurovs", :link=>"http://feeds.feedburner.com/mansurovs", :type=>"html"},
          {:name=>'random-determinism', :link=>"http://randomdeterminism.wordpress.com/feed/", :type=>"html"},
        ]

FEEDS.each do |feed|
    rssfeed  = RssFeed.new feed[:link], feed[:type]
    renderer = RssRender.new feed[:name]
    puts "Generating feed #{feed[:name]}"
    renderer.render rssfeed
    #renderer.email "adityam_77@free.kindle.com" 
end
