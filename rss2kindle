#!/usr/bin/env ruby
# encoding: UTF-8

CWD = "/home/adityam/.rss2kindle"

Dir.chdir CWD

BLOGS = [ {:name=>"coding-horror", :link=>"http://feeds.feedburner.com/codinghorror/", :type=>"html"},
          {:name=>"endeavor", :link=>"http://feeds.feedburner.com/theendeavour", :type=>"html"},
          # {:name=>"TeX", :link=>"http://texample.net/feeds/community/", :type=>"html"},
          {:name=>"mansurovs", :link=>"http://feeds.feedburner.com/mansurovs", :type=>"html"},
          {:name=>"devdutt", :link=>"http://feeds.feedburner.com/Devdutt", :type=>"html"},
          {:name=>'random-determinism', :link=>"http://randomdeterminism.wordpress.com/feed/", :type=>"html"},
          {:name=>"xkcd", :link=>"http://xkcd.com/atom.xml", :type=>:html},
          {:name=>"fastcompany", :link=>"http://feeds.feedburner.com/fastcompany/headlines", :type=>"html"},
        ]

PAPERS = [ {:name=>"IEEE-TAC", :link=>"http://ieeexplore.ieee.org/rss/TOC9.XML", :type=>"markdown"},
           {:name=>"Arxiv-IT", :link=>"http://export.arxiv.org/rss/cs.IT", :type=>"markdown"},
           {:name=>"Arxiv-OC", :link=>"http://export.arxiv.org/rss/math.OC", :type=>"markdown"},
         ]

# SimpleRSS generates a lot of warnings related to UTF. So, we disable warnings
$VERBOSE = nil

require 'rubygems'
require 'feed-normalizer'
require 'open-uri'
require 'htmlentities'

class RssFeed
  attr_reader :url, :type, :id

  def initialize(id, url, type=:html)
    @id   = id
    @url  = url
    @type = type
  end
end

class RssRender
  attr_accessor :filename, :to_context, :now, :day, :updated

  attr_accessor :start, :stop

  @@html = HTMLEntities.new

  def initialize filename #Assume filename has no extension
    @filename = filename
    @now   = DateTime.now
    @day   = @now - 2
    # If needed, we can add the following as well
    # @week  = @now - 7
    # @month = @now << 1 

    @updated = false

    @start = "\\usemodule[rssfeed] \n\\starttext\n" +
             "\\starttitle[title={Feed for #{@now.to_date}}]\n  \\placelist[part, chapter]\n\\stoptitle"
    @stop  = "\\stoptext"

  end

  def start
    File.open("#{@filename}.tex", 'a') do |file|
      file.puts @start
    end
  end

  def stop
    File.open("#{@filename}.tex", 'a') do |file|
      file.puts @stop
    end
  end

  def render feed 
    rss = FeedNormalizer::FeedNormalizer.parse open(feed.url)

    @to_context = Proc.new{|text| to_context_from feed.type, text}
    @updated    = false

    File.open("#{@filename}.tex", 'a') do |file|
      title       = @to_context.call(rss.title)         rescue nil
      description = @to_context.call(description)       rescue nil
      link        = rss.url                             rescue nil

      rss.clean!

      rss.entries.each do |item| 
         date = DateTime.parse item.date_published rescue DateTime.now
         date = DateTime.parse item.last_updated rescue DateTime.now if date.nil?
         date = DateTime.now if date.nil?

         if date > @day
           
           file.puts(render_title title, description, link) unless updated
           @updated = true

           title   = @@html.decode item.title
           link    = item.url

           content = item.content rescue item.description
           # Sometimes content is set to nill
           content = item.description if content == ""

           content = @to_context.call(content)

           file.puts(render_item feed.id, title, link, content)
         end
      end
      file.puts("\\stoppart") if updated
    end

    return @updated
  end

  def render_standalone feed
    File.delete ("#{@filename}.tex") if File.exists? ("#{@filename}.tex")

    start
    render feed
    stop
    compile

  end


  def email address
    %x[mutt -a #{@filename}.pdf -- #{address} < /dev/null]
  end

  def compile 
    %x[source /opt/context-minimals/setuptex && context --batchmode --noconsole #{filename}] if @updated
  end


  private

  def to_context_from from, text
    context = ""
     IO.popen(["/home/adityam/.cabal/bin/pandoc", "-f", from.to_s, "-t",  "context"], mode="r+") do |file|
      file.puts text
      file.close_write
      context = file.read
    end
    return context.strip
  end

  def render_url link, text
    %<\\useURL[link][#{link}][][{#{text}}]>
  end

  def render_title title, description, link
    %<
      #{render_url link, "{\\ttx #{link}}"}
      \\startpart
          [title={#{title}}]
          [description={#{description}},
           link={\\from[link]}]
    >
  end

  def render_item id, title, link, content
    %<
      #{render_url link, title}
      \\startchapter[title={\\from[link]}, list={#{title}}, bookmark={#{title}}, 
                    marking={#{id} â–¶ #{title}}]
      #{content}
      \\stopchapter
    >
  end

end

def rss2kindle title, list
    filename = "#{title}-#{DateTime.now.to_date}"
    File.delete ("#{filename}.tex") if File.exists? ("#{filename}.tex")
    renderer = RssRender.new filename

    updated = false 

    renderer.start

    list.each do |feed|
        rssfeed  = RssFeed.new feed[:name], feed[:link], feed[:type]
        puts "Generating feed #{feed[:name]}"
        if renderer.render rssfeed
           puts ">> #{feed[:name]} updated."
           updated = true 
        end
    end
    renderer.stop

    if updated
      puts "== Feeds updated. compiling TeX file. =="
      renderer.compile
      unless $?.success?
        puts ">> Error in ConTeXt run" 
        # Compile two more time to get cross-referencing right
        2.times{renderer.compile}
      end
       renderer.email "adityam_77@free.kindle.com" 
    else
      puts "== Feeds not updated =="
    end
end

rss2kindle "Blogs", BLOGS
rss2kindle "Papers", PAPERS
